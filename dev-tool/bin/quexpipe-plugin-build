#!/bin/bash

#*******************************************************************************
# Copyright (c) 2016 MÓRÉH Tamás
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the GNU Lesser Public License v3
# which accompanies this distribution, and is available at
# http://www.gnu.org/licenses/
#
# This file is part of QuexPipe.
#
# QuexPipe is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# QuexPipe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser Public License for more details.
#
# Contributors:
#     MÓRÉH Tamás - Software architecture design and implementation
#*****************************************************************************

# if [ -n "$QUEXPIPE_INCLUDE_PATH" ]; then
#   ;;
# else
#   QUEXPIPE_INCLUDE_PATH=quexpipe
# fi

# Usage info
show_help() {
echo "Plugin compiler helper for QuexPipe. Version: 1.0.0
Usage: ${0##*/} lexer_name [OPTIONS]
Options are:
    -h          Display this help and exit.
    -b BUFFER_HANDLING
                The buffer handling method (copy, fill, point).
                Default is the point. Experimental use only!
    -B BUFFER_SIZE
                Lexer module buffer size. If the maximum lexeme size is known,
                it's recommended to set at least double of them.
    -c TYPE     Buffer element type. Default: wchar_t. See the Quex documentation.
    -p TOKEN_POLICY
                The token policy method (single, queue). Default is the single.
                Use queue if accumulator used in Quex space, otherwise keep single.
    -g          Generates source code but doesn't compile.
    -s          Keeps the source code after compilation.
    -O OPT      The level of code optimalization by g++ (0, 1, 2, 3, fast, s).
    -R          Removes only all source files from qx generated and exit.
    -C COMPILER  Specifies the C++ compiler (in path). Default: g++.
                 GNU g++/mingw, CLAG and Intel can be used. Don't use MSVC.

© MÓRÉH Tamás, MTA-PPKE-NLPG 2014-2016.
Released under LGPL v3. Contact: morta@digitus.itk.ppke.hu
ABSOLUTELY NO WARRANTY"
}

if [ $# -eq 0 ]; then
    show_help
    exit 1
fi
if [ $1 == "--help" ]; then
    show_help
    exit 0
fi

FILENAME=$1
NAME=`echo $1 | sed -r "s/.qx//"`

delete_sources() {
    echo -e "\e[36mDeleting the generated files...\e[39m"
    rm $NAME $NAME-configuration "$NAME""_shared.cpp" $NAME-token $NAME-token_ids
}


handling_arr=(point)  # todo (copy fill point) when implementation is ready
policy_arr=(single queue)
optim_arr=(0 1 2 3 fast s)
BUFFER_SIZE=65536
BUFFER_HANDLING="point"
TOKEN_POLICY="single"
CHAR_TYPE="wchar_t"

QUEX_FLAGS=""

COMPILE=1
DELETE_SOURCE=1
OPTIM_LEVEL="3"
CXX=g++

OPTIND=2
while getopts ":hRb:p:gsO:B:C:" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        R )
            delete_sources
            exit 0
            ;;
        b)
            BUFFER_HANDLING=$OPTARG
            conts=0
            for h in "${handling_arr[@]}"; do
                if [[ $h == $BUFFER_HANDLING ]]; then
                    conts=1
                    break
                fi
            done
            if [[ $conts == 0 ]]; then
                show_help
                exit 1
            fi
            ;;
        p)
            TOKEN_POLICY=$OPTARG
            conts=0
            for h in "${policy_arr[@]}"; do
                if [[ $h == $TOKEN_POLICY ]]; then
                    conts=1
                    break
                fi
            done
            if [[ $conts == 0 ]]; then
                show_help
                exit 1
            fi
            ;;
        c)
            CHAR_TYPE=$OPTARG
            ;;
        g)  
            COMPILE=0
            ;;
        s)
            DELETE_SOURCE=0
            ;;
        O)
            OPTIM_LEVEL=$OPTARG
            conts=0
            for h in optim_arr; do
                if [[ $h == $OPTIM_LEVEL ]]; then
                    conts=1
                    break
                fi
            done
            if [[ $conts == 0 ]]; then
                show_help
                exit 1
            fi
            ;;
        B)
            BUFFER_SIZE=$OPTARG
            ;;
        C)
            CXX=$OPTARG
            ;;
    esac
done
shift $((OPTIND-1))

if [[ $TOKEN_POLICY == "queue" ]]; then
    QUEX_FLAGS="$QUEX_FLAGS --token-policy $TOKEN_POLICY --token-queue-size 8 --token-queue-safety-border 2"
else
    QUEX_FLAGS="$QUEX_FLAGS --token-policy $TOKEN_POLICY --tmmbu"
fi
QUEX_FLAGS="$QUEX_FLAGS --bet $CHAR_TYPE"

#########################
# Quex the grammar file
#########################

echo -e "\e[36mCompiling quex grammar from $FILENAME to $NAME...\e[39m"
quex -i $FILENAME -o $NAME $QUEX_FLAGS

if [[ $? != 0 ]]; then
    echo -e "\e[91mERROR HAPPENED!\e[39m"
    show_help
    exit 1
fi

#########################
# Create the source file
#########################

mv $NAME.cpp "$NAME""_shared.cpp"

echo -e "\e[36mCreating C++ source file...\e[39m"
INCLUDES="-I. -I$QUEX_PATH"
DEFINITIONS="-DQUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED -DQUEX_SETTING_BUFFER_SIZE=$BUFFER_SIZE"
CXXFLAGS="$INCLUDES -O$OPTIM_LEVEL -std=c++11 -Wall -W -fPIC -shared $DEFINITIONS"
HEADER="implementation_$BUFFER_HANDLING""_""$TOKEN_POLICY.h"

echo -e "\n
/**************************************************************
 *   Auto generated source part for Quex-generated lexer
 *   Do not edit manually!
 *
 *   This file will be compiled to a .so file which is able to
 *   load and use by the QuexPipe lexer as a plugin.
 **************************************************************/

#include <quexpipe/$HEADER>
" >> "$NAME""_shared.cpp"

if [ "$COMPILE" -eq 0 ]; then
    exit 0
fi

#########################
# Compile
#########################

echo -e "\e[36mCompiling the lexer...\e[39m"
$CXX "$NAME""_shared.cpp" -o $NAME.so $CXXFLAGS

if [[ $? != 0 ]]; then
    echo -e "\e[91mERROR HAPPENED!\e[39m"
    show_help
    exit 1
fi

#########################
# Delete source after compiling
#########################

if [ "$DELETE_SOURCE" -eq 1 ]; then
    delete_sources
fi
